// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hb29.API.Repository;

#nullable disable

namespace hb29.API.Migrations
{
    [DbContext(typeof(DefaultContext))]
    partial class DefaultContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("hb29.API.Models.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("RecordId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventDate", "TableName", "RecordId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("hb29.API.Models.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Permissions_Name_Unique")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 103L,
                            ConcurrencyToken = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "START_ACTIVITY",
                            Name = "START_ACTIVITY"
                        },
                        new
                        {
                            Id = 104L,
                            ConcurrencyToken = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "DOWNLOAD_FILE_ACTIVITY",
                            Name = "DOWNLOAD_FILE_ACTIVITY"
                        },
                        new
                        {
                            Id = 105L,
                            ConcurrencyToken = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "UPDATE_CLUSTER",
                            Name = "UPDATE_CLUSTER"
                        },
                        new
                        {
                            Id = 106L,
                            ConcurrencyToken = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "SAVE_CLUSTER",
                            Name = "SAVE_CLUSTER"
                        },
                        new
                        {
                            Id = 107L,
                            ConcurrencyToken = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "REMOVE_CLUSTER",
                            Name = "REMOVE_CLUSTER"
                        },
                        new
                        {
                            Id = 108L,
                            ConcurrencyToken = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "UPDATE_COUNTRY",
                            Name = "UPDATE_COUNTRY"
                        },
                        new
                        {
                            Id = 109L,
                            ConcurrencyToken = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "SAVE_COUNTRY",
                            Name = "SAVE_COUNTRY"
                        });
                });

            modelBuilder.Entity("hb29.API.Models.Preference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Preferences");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConcurrencyToken = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsEnabled = false,
                            Name = "Send e-mail on Workflow Status Change"
                        },
                        new
                        {
                            Id = 2L,
                            ConcurrencyToken = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsEnabled = false,
                            Name = "Send e-mail on Node Template processed"
                        },
                        new
                        {
                            Id = 3L,
                            ConcurrencyToken = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsEnabled = false,
                            Name = "Send e-mail on Workflow Design Expiration."
                        });
                });

            modelBuilder.Entity("hb29.API.Models.PrivacyPolicy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("PrivacyPolicyStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("conditions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PrivacyPolicies");
                });

            modelBuilder.Entity("hb29.API.Models.Profile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdGroupId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AdGroupId" }, "IX_Profiles_AddGroupName_Unique")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "IX_Profiles_Name_Unique")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("hb29.API.Models.ServiceSetting", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ConcurrencyToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServiceSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyToken = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Configuração 1",
                            Type = "Int32",
                            Value = "30"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyToken = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Configuração 2",
                            Type = "String",
                            Value = ""
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyToken = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Configuração 3",
                            Type = "String",
                            Value = ""
                        });
                });

            modelBuilder.Entity("hb29.API.Models.UserPreference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long>("PreferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Upn")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PreferenceId");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("hb29.API.Models.UserTerm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long>("PrivacyPolicyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PrivacyPolicyId");

                    b.ToTable("UserTerms");
                });

            modelBuilder.Entity("PermissionProfile", b =>
                {
                    b.Property<long>("PermissionsId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProfilesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PermissionsId", "ProfilesId");

                    b.HasIndex("ProfilesId");

                    b.ToTable("PermissionProfile");
                });

            modelBuilder.Entity("hb29.API.Models.UserPreference", b =>
                {
                    b.HasOne("hb29.API.Models.Preference", null)
                        .WithMany("Users")
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hb29.API.Models.UserTerm", b =>
                {
                    b.HasOne("hb29.API.Models.PrivacyPolicy", "Cluster")
                        .WithMany()
                        .HasForeignKey("PrivacyPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("PermissionProfile", b =>
                {
                    b.HasOne("hb29.API.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hb29.API.Models.Profile", null)
                        .WithMany()
                        .HasForeignKey("ProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hb29.API.Models.Preference", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
